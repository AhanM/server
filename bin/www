#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Showcase:server');
var http = require('http');
var reload = require('require-reload')(require);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//=========================================================
//CSES LABS INITIALIZATION
//=========================================================

/*
* // install sockets
* var io = require('socket.io').listen(server);
* // getting and broadcasting data
* var data = require('./readLog');
* console.log('log.txt loaded');
* setInterval(function(){
*   try {
*     data = reload('./readLog');
*   } catch (e) {
*     // if this threw an error, the api variable is still set to the old, working version
*     console.error("Failed to reload api.js! Error: ", e);
*   }
*   console.log('log.txt reloaded, from: ' + data.date);
* }, 5*60*1000);

* // emit data about which lab computers are available
* io.sockets.on('connection', function(socket){
*   socket.on('askForData', function(){
*     console.log('data asked for');
*     socket.emit('Event', data);
*     console.log(data);
*   })

* });
*/

//=========================================================

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
